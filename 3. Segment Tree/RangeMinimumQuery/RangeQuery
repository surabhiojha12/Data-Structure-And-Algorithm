// QUERY ON SEGMENT TREE
#include <bits/stdc++.h>

using namespace std;

vector <int> input;
vector <int> stree;

//build segment tree
void build(int start,int end,int index){

   //base case
   if(start == end){
        stree[index] = input[start];
        return;
   }
   //recursive call
   int mid = (start + end ) / 2;
   build(start,mid,index*2+1);
   build(mid+1,end,index*2+2);

   stree[index] = min(stree[index*2 + 1],stree[index*2 + 2]);
   return;

}

//Query segment tree

int query(int start,int end,int qs,int qe,int index){
    //complete overlap
    if(qs<= start && end <= qe){
        return stree[index];
    }
    //no overlap
    if(qe < start || qs > end){
        return INT_MAX;
    }
    //recursive call
    int mid = (start + end ) / 2;
    return min (query(start,mid,qs,qe,index*2+1) , query(mid+1,end,qs,qe,index*2+2));

}

int main(){
    int n,i,t;
    cin>>n;
    for(i=0;i<n;i++){
        cin>>t;
        input.push_back(t);
    }

    for(i=0;i<4*n;i++){
        stree.push_back(INT_MAX);
    }
    // element mathematically the segment tree can have is 4*n + 1
    build(0,n-1,0);
    for(i=0;i<4*n && stree[i] != INT_MAX ;i++){
        cout<<stree[i]<<" ";
    }
    int last = 1;
    while(last == 1){
      cout<<endl;
      int qs,qe;
      cout<<"enter query start and query end ";
      cin>>qs>>qe;
      int ans = query(0,n-1,qs,qe,0);
      cout<<ans<<endl;
      cout<<"enter 1 to continue ";
      cin>>last;
    }
    return 0;
}

