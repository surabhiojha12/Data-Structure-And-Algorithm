#include<bits/stdc++.h>

/*
KosaRaju Algorithm to find the strongly connected graph.
Used for directed graph

Strategy
1. Make a visited array and mark all components false visited[v] = {0}
2. Find DFS
    if: every node is visited goto step 3
    else: return false
3. Reverse all the edges in te graph
4. Make a visited array and mark all components false visited[v] = {0}
5. Find DFS
    if: every node is visited goto step 3
    else: return false
6. return True

*/

using namespace std;

// adjacecny list implementation of graph

void build_graph(vector <int> adjList[],int node,int adj){
    
    adjList[node].push_back(adj);
}

void display_graph(vector <int> adjList[],int v){
    
    for(int i=0;i<v;i++){
        cout<<i<<"-> ";
        for(auto value:adjList[i]){
            cout<<value<<",";
        }
        cout<<endl;
    }
}

void dfs_recursive(vector <int> adjList[],vector <int> &visited,int v){
     
     visited[v] = 1;
     

     for(auto m : adjList[v]){
         if(visited[m] == 0){
             dfs_recursive(adjList,visited,m);
         }
     }

}

bool dfs(vector <int> adjList[],int v,int source){
         vector <int> visited(v);
         
         dfs_recursive(adjList,visited,source);

         for(int i=0;i<v;i++){
             if(visited[i] == 0){
                 return false;
             }
         }
         return true;
}

int main(){
    // no of vertices
    int v = 5;
    vector <int> adjList[v];
    
    
    build_graph(adjList,0,1);
    build_graph(adjList,0,4);
    build_graph(adjList,1,4);
    build_graph(adjList,1,3);
    build_graph(adjList,1,2);
    build_graph(adjList,2,3);
    build_graph(adjList,3,4);

    display_graph(adjList,v);
    cout<<endl;
    bool g1 = dfs( adjList, v,0);

    if(g1 == false){
        cout<<"Graph is not a strongly connected"<<endl;
    }
    else{
        //reverse the graph
        vector <int> adjList_2[v];
        build_graph(adjList_2,1,0);
        build_graph(adjList_2,4,0);
        build_graph(adjList_2,4,1);
        build_graph(adjList_2,3,1);
        build_graph(adjList_2,2,1);
        build_graph(adjList_2,3,2);
        build_graph(adjList_2,4,3);

        display_graph(adjList_2,v);
        cout<<endl;
        bool g2 = dfs( adjList_2, v,0);

        if(g2 == false){
            cout<<"Graph is not a strongly connected"<<endl;
        }

        else{
            cout<<"Graph is a Strongly connected"<<endl;
        }
    }

    
    return 0;
}
